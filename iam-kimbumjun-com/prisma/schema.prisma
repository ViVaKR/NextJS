// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma migrate dev --name init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client" // 필요 시 명시
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  role    Role     @default(USER)
  posts   Post[]
  profile Profile?

  @@map("users")
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique

  @@map("profiles")
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  title      String
  content    String?
  published  Boolean    @default(false)
  data       Json       @default("{\"Hello,\": \" World\"}")
  author     User       @relation(fields: [authorId], references: [id])
  authorId   Int
  categories Category[]
  comments   Comment[]

  @@unique(name: "authorTitle", [authorId, title])
  @@map("posts")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]

  @@map("categories")
}

model Comment {
  id      Int     @id @default(autoincrement())
  title   String
  content String?
  post    Post?   @relation(fields: [postId], references: [id])
  postId  Int?

  @@map("comments")
}

model Tag {
  name String @id

  @@map("tags")
}

model Demo {
  id   Int    @id @default(autoincrement())
  name String

  @@map("demos")
}

enum Role {
  USER
  ADMIN
}
